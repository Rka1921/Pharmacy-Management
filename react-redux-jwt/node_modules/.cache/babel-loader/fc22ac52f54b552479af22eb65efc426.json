{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(htmlElement, checkWith) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    normalizeWhitespace: true\n  };\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(htmlElement.textContent) : htmlElement.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)((0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmpty() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","toHaveTextContent","_jestMatcherUtils","require","_utils","htmlElement","checkWith","options","normalizeWhitespace","checkHtmlElement","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","matcherHint"],"sources":["D:/CG TRAINING 2/Pharmacy Management System/react-redux-jwt/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _jestMatcherUtils = require(\"jest-matcher-utils\");\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(htmlElement, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(htmlElement.textContent) : htmlElement.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)((0, _jestMatcherUtils.matcherHint)(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmpty() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,iBAAT,CAA2BI,WAA3B,EAAwCC,SAAxC,EAEG;EAAA,IAFgDC,OAEhD,uEAF0D;IAC3DC,mBAAmB,EAAE;EADsC,CAE1D;EACD,CAAC,GAAGJ,MAAM,CAACK,gBAAX,EAA6BJ,WAA7B,EAA0CJ,iBAA1C,EAA6D,IAA7D;EACA,MAAMS,WAAW,GAAGH,OAAO,CAACC,mBAAR,GAA8B,CAAC,GAAGJ,MAAM,CAACO,SAAX,EAAsBN,WAAW,CAACK,WAAlC,CAA9B,GAA+EL,WAAW,CAACK,WAAZ,CAAwBE,OAAxB,CAAgC,SAAhC,EAA2C,GAA3C,CAAnG,CAFC,CAEmJ;;EAEpJ,MAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAhB,IAAsBJ,SAAS,KAAK,EAApE;EACA,OAAO;IACLQ,IAAI,EAAE,CAACD,uBAAD,IAA4B,CAAC,GAAGT,MAAM,CAACW,OAAX,EAAoBL,WAApB,EAAiCJ,SAAjC,CAD7B;IAELU,OAAO,EAAE,MAAM;MACb,MAAMC,EAAE,GAAG,KAAKC,KAAL,GAAa,QAAb,GAAwB,IAAnC;MACA,OAAO,CAAC,GAAGd,MAAM,CAACe,UAAX,EAAuB,CAAC,GAAGjB,iBAAiB,CAACkB,WAAtB,EAAoC,GAAE,KAAKF,KAAL,GAAa,MAAb,GAAsB,EAAG,oBAA/D,EAAoF,SAApF,EAA+F,EAA/F,CAAvB,EAA2HL,uBAAuB,GAAI,wEAAJ,GAA+E,oBAAmBI,EAAG,oBAAvP,EAA4QX,SAA5Q,EAAuR,UAAvR,EAAmSI,WAAnS,CAAP;IACD;EALI,CAAP;AAOD"},"metadata":{},"sourceType":"script"}