{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst diffStrings = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const diffs = [];\n\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex, aCommon)));\n    }\n\n    if (bIndex !== bCommon) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex, bCommon)));\n    }\n\n    aIndex = aCommon + nCommon; // number of characters compared in a\n\n    bIndex = bCommon + nCommon; // number of characters compared in b\n\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, b.slice(bCommon, bIndex)));\n  };\n\n  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  if (aIndex !== a.length) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex)));\n  }\n\n  if (bIndex !== b.length) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex)));\n  }\n\n  return diffs;\n};\n\nvar _default = diffStrings;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_diffSequences","_interopRequireDefault","require","_cleanupSemantic","obj","__esModule","diffStrings","a","b","isCommon","aIndex","bIndex","diffs","foundSubsequence","nCommon","aCommon","bCommon","push","Diff","DIFF_DELETE","slice","DIFF_INSERT","DIFF_EQUAL","length","_default"],"sources":["D:/CG TRAINING 2/Pharmacy Management System/react-redux-jwt/node_modules/jest-diff/build/diffStrings.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst diffStrings = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const diffs = [];\n\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_DELETE,\n          a.slice(aIndex, aCommon)\n        )\n      );\n    }\n\n    if (bIndex !== bCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_INSERT,\n          b.slice(bIndex, bCommon)\n        )\n      );\n    }\n\n    aIndex = aCommon + nCommon; // number of characters compared in a\n\n    bIndex = bCommon + nCommon; // number of characters compared in b\n\n    diffs.push(\n      new _cleanupSemantic.Diff(\n        _cleanupSemantic.DIFF_EQUAL,\n        b.slice(bCommon, bIndex)\n      )\n    );\n  };\n\n  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  if (aIndex !== a.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex))\n    );\n  }\n\n  if (bIndex !== b.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex))\n    );\n  }\n\n  return diffs;\n};\n\nvar _default = diffStrings;\nexports.default = _default;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA3C;;AAEA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAACL,OAAO,EAAEK;EAAV,CAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;EAC5B,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoBJ,CAAC,CAACG,MAAD,CAAD,KAAcF,CAAC,CAACG,MAAD,CAApD;;EAEA,IAAID,MAAM,GAAG,CAAb;EACA,IAAIC,MAAM,GAAG,CAAb;EACA,MAAMC,KAAK,GAAG,EAAd;;EAEA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,KAA+B;IACtD,IAAIN,MAAM,KAAKK,OAAf,EAAwB;MACtBH,KAAK,CAACK,IAAN,CACE,IAAId,gBAAgB,CAACe,IAArB,CACEf,gBAAgB,CAACgB,WADnB,EAEEZ,CAAC,CAACa,KAAF,CAAQV,MAAR,EAAgBK,OAAhB,CAFF,CADF;IAMD;;IAED,IAAIJ,MAAM,KAAKK,OAAf,EAAwB;MACtBJ,KAAK,CAACK,IAAN,CACE,IAAId,gBAAgB,CAACe,IAArB,CACEf,gBAAgB,CAACkB,WADnB,EAEEb,CAAC,CAACY,KAAF,CAAQT,MAAR,EAAgBK,OAAhB,CAFF,CADF;IAMD;;IAEDN,MAAM,GAAGK,OAAO,GAAGD,OAAnB,CAnBsD,CAmB1B;;IAE5BH,MAAM,GAAGK,OAAO,GAAGF,OAAnB,CArBsD,CAqB1B;;IAE5BF,KAAK,CAACK,IAAN,CACE,IAAId,gBAAgB,CAACe,IAArB,CACEf,gBAAgB,CAACmB,UADnB,EAEEd,CAAC,CAACY,KAAF,CAAQJ,OAAR,EAAiBL,MAAjB,CAFF,CADF;EAMD,CA7BD;;EA+BA,CAAC,GAAGX,cAAc,CAACD,OAAnB,EAA4BQ,CAAC,CAACgB,MAA9B,EAAsCf,CAAC,CAACe,MAAxC,EAAgDd,QAAhD,EAA0DI,gBAA1D,EAtC4B,CAsCiD;;EAE7E,IAAIH,MAAM,KAAKH,CAAC,CAACgB,MAAjB,EAAyB;IACvBX,KAAK,CAACK,IAAN,CACE,IAAId,gBAAgB,CAACe,IAArB,CAA0Bf,gBAAgB,CAACgB,WAA3C,EAAwDZ,CAAC,CAACa,KAAF,CAAQV,MAAR,CAAxD,CADF;EAGD;;EAED,IAAIC,MAAM,KAAKH,CAAC,CAACe,MAAjB,EAAyB;IACvBX,KAAK,CAACK,IAAN,CACE,IAAId,gBAAgB,CAACe,IAArB,CAA0Bf,gBAAgB,CAACkB,WAA3C,EAAwDb,CAAC,CAACY,KAAF,CAAQT,MAAR,CAAxD,CADF;EAGD;;EAED,OAAOC,KAAP;AACD,CArDD;;AAuDA,IAAIY,QAAQ,GAAGlB,WAAf;AACAT,OAAO,CAACE,OAAR,GAAkByB,QAAlB"},"metadata":{},"sourceType":"script"}